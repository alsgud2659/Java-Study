함수형 인터페이스(Functional interface)
	인터페이스 중 추상 메소드를 하나만 가지고 있는 인터페이스를 함수형 인터페이스라고 한다.
	이 때 @FunctionalInterface를 인터페이스 위에 작성하여 단 하나의 추상메소드만
	선언할 수 있도록 제한해야한다.

람다식(Lambda Expression)
	이름이 없는 메소드로서 변수처럼 사용이 가능하며, 매개변수로도 전달이 가능하다.
	함수형 인터페이스는 추상 메소드가 한 개만 선언되기 때문에 메소드 이름이 필요 없다.
	따라서 람다식을 익명 메소드(Anonymous Method)라고도 부른다.

람다식 문법
	1. (매개변수 형식 나열,...) -> 리턴값;
	2. (매개변수 형식 나열,...) -> {2개 이상의 문장 작성; return 리턴값;}
----------------------------------------------------------------------------------------
[실습]
함수형 인터페이스를 선언하고 이름과 성을 전달받는 추상메소드를 선언한다.
클래스를 선언하고 함수형 인터페이스를 매개변수로 받는 static 메소드를 선언한다.
외부에서 구현된 값을 전달받은 후 static 메소드에서 이름과 성을 전달하여 전체 이름을 출력하도록 구현한다.
main메소드에서는 static메소드를 사용하여 전체 이름을 출력한다.

[심화 실습]
여러 개의 정수를 입력받아서 알맞는 덧셈, 뺄셈 결과를 확인하는 애플리케이션 제작

입력 예1) 7 + 35 - 9
출력 예1) 33

입력 예2) -9 + 8 + 10
출력 예2) 9

* 사용자가 정상적으로만 입력한다는 가정 하에 구현하도록 한다.
* 두 정수를 전달받은 후 int로 리턴하는 calc 추상메소드 선언(함수형 인터페이스 제작)
* 두 정수의 덧셈, 뺄셈을 구해주는 함수형 인터페이스를 리턴하는 static 메소드 선언(람다식 리턴)
* 전체 식을 전달받은 후 String[]로 리턴하는 getOpers 추상메소드 선언(함수형 인터페이스 제작)
* main메소드에 getOper를 람다식으로 구현
* 첫번째 정수가 음수일 경우 오류 해결
---------------------------------------------------------------------------------------
예외 처리
	에러 : 심각한 오류
	예외 : 덜 심각한 오류

예외 처리 문법
	try{
		오류가 발생할 수 있는 문장

	}catch(예외이름 객체명){
		오류 발생 시 실행할 문장
	}catch(예외이름 객체명){
		오류 발생 시 실행할 문장
	}
	...
	}finally{
		오류 발생 여부에 상관없이 무조건 실행할 문장
		※외부 장치와 연결했을 경우 다시 닫을 때 주로 사용된다.
	}
































