변수 : 저장공간
	x 	= 	20
      저장공간의	대입	값(상수)
      이름		연산자

자료형(type, 종류)

자료형		type		byte		값

정수형		int		4		0, -231, 12, 2147483647, ...
실수형		float		4		1.2564864896F, -1.156F, 0.0F, 3.0F,...
		double		8		1.2564864896, -1.156, 0.0, 3.0,...
문자형		char		2		'A', '한', '1',...
문자열		String		?		"ABC", "한동석", "123", "0.0",...

변수의 선언
	자료형 변수명 = 초기값;
	자료형 변수명;

	예)
	int x = 10;
	x라는 이름의 저장공간이 만들어지고 그 안에 10이 들어간다.

RAM(메모리)
==================
OS kernel space		: 드라이버
==================
Stack			: 지역변수, 매개변수
==================
Heap			: 동적 메모리
==================
BSS			: 직접 초기화되지 않은 전역변수
==================
Data영역			: 전역 변수, 정적 변수
==================
Text영역			: 상수, 코드
==================

RAM
	int x = 10;
	x라는 이름의 저장공간이 RAM에 할당되고 10이라는 값이 들어간다.

주소(해시코드)
	int x = 10;
	x라는 이름의 저장공간이 RAM에 할당되면 고유한 값인 주소값이 부여된다.
	계속 실행되고 종료되는 프로그램이 있기 때문에, 주소값은 변경될 수 있으나
	중복은 없다.

변수의 사용
	int data = 20;	// 저장공간
	data = 30;	// 저장공간	
	System.out.print(data + 9);	// 값
	data = data + 7;	// 저장공간, 값
	data - 9;	// 값

변수 선언 시 주의사항
	같은 이름의 변수로 선언할 수 없다.
	초기화를 해준다.
	되도록 선언부에 한꺼번에 선언한다(영역 상단).


변수명 주의사항
	문자로 시작해야 한다.
	특수문자는 사용할 수 없다. 단, _는 허용한다.
	되도록 소문자만 사용한다.
	공백을 사용할 수 없다.
	good_boy : 팟홀 표기법, 언더바 표기법
	goodBoy : 카멜 표기법
	되도록 한글은 사용하지 않는다.
	명사로 사용한다.
	뜻이 있는 단어를 사용한다.
	a, b, c, d, e,....(X)
	data, number, num, age, name,....(O)

변수를 사용하는 이유
	1. 반복되는 값을 쉽게 관리할 수 있다.
	2. 의미 없는 값을 하나의 정보로 만들기 위해서 사용한다(자료구조).

서식문자(format)
	반드시 따옴표 안에서 작성해야 한다.
	
	%d	decimal(10진수 정수)
	%o	octal(8진수 정수)
	%x	hexadecimal(16진수 정수)
	%f	float(실수)
	%c	character(문자)
	%s	string(문자열)

출력 메소드
	printf() : 서식문자를 사용하여 출력할 수 있으며, 자동으로 줄바꿈되지 않는다.

출력 메소드를 사용하는 이유
	문제 발생 시 어떤 부분이 문제인지를 구체화시킬 수 있도록
	라인 별로 출력하여 알아내기 위함이다.
	사용자를 위한 도구가 아닌, 개발자를 위한 도구이다.

상수(항상 그대로인 수)
	값을 변경할 수 없도록 한다.
	final 자료형 상수명 = 값;
	단, 상수명은 전부 대문자로 약속한다.

형변환
	- 자동 형변환
		정수 + 정수 = 정수
		정수 + 실수 = 실수
		3 + 0.0 = 3.0
		문자 + 정수 = 정수

	- 강제 형변환
		(자료형)값
		(double)3		-->	3.0

문자열 형변환
	1. 다른 자료형을 문자열로
		문자열과 다른 자료형을 연결하면 결과는 항상 문자열이 된다.

	2. 문자열을 다른 자료형으로
		일반 자료형은 일반 자료형끼리 형변환이 되고, 클래스 타입은 클래스 타입끼리 형변환이 된다.
		따라서 문자열을 정수, 실수로 변경하기 위해서는 Integer, Double 클래스의 메소드를 사용해야 한다.
----------------------------------------------------------------------------------------------------------------------------------------
입력
	커서가 깜빡이고 있는 상태.
	입력하기 전에 출력을 통해 어떤 값을 입력해야 할 지 사용자에게 알려주어야 한다.

입력 클래스
	Scanner sc = new Scanner(System.in);

입력 메소드(콘솔창에서 커서를 깜빡여 준다)
	next() : 사용자가 입력한 문자열 값
		- 사용자가 입력한 값 중 공백 또는 줄바꿈 문자를 구분점으로 각 문자열을 분리한다.
		- 첫 번째 문자열을 첫번째 next()에 담고,
	  	  두 번째 문자열은 두번째 next()에 담는다.

	nextLine() : 사용자가 입력한 문자열 값
		- 공백 또는 줄바꿈 문자도 값으로 취급하기 때문에 그대로 입력받는다.
----------------------------------------------------------------------------------------------------------------------------------------
연산자
	기능이 있는 특수문자

연산자의 우선순위
	하나의 수식에 여러 개의 연산자를 사용하면 어떤 연산이 먼저 되는 지를 구분한다.

	최우선 연산자
	단항 연산자
	산술 연산자
	쉬프트 연산자
	관계 연산자
	논리 연산자
	삼항 연산자
	대입 연산자

결합성
	하나의 수식에 동일한 연산자가 여러 개 사용되면 알맞은 방향으로 결합되어 연산되는 성질

비트 연산
	논리 연산자
		&	(AND, 논리곱) : A & B, 두 비트 모두 1이면 1
		|	(OR, 논리합) : A | B, 둘 중 하나라도 1이면 1
		^	(XOR, 배타논리합) : A ^ B, 두 비트가 서로 다르면 1

	단항 연산자
		~	(NOT, 논리부정) : ~A, 0은 1로 1은 0으로 변경, ~a = -a-1

	쉬프트 연산자(이동)
		<<	(LEFT SHIFT, 좌쉬프트), A << B, A를 B만큼 좌로 비트이동
		>>	(RIGHT SHIFT, 우쉬프트), A >> B, A를 B만큼 우로 비트이동




















