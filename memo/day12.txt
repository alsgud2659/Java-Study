Object
	1. toString()
	2. equals()
	3. hashCode() : 해당 객체의 주소값
	   ※ 컬렉션 프레임워크 챕터에서 재정의 목적을 이해하도록 한다.
------------------------------------------------------------------------------
Wrapper Class : 기본 자료형들의 클래스 타입
	클래스타입 객체 = new 클래스타입(일반타입의 값);	// boxing
	일반타입 변수 = 객체.000Value();		// unboxing

	JDK4 버전 이상부터는 auto를 지원한다.
	클래스타입 객체 = 일반타입의 값;		// auto boxing
	일반타입 변수 = 객체;			// auto unboxing

Wrapper Class를 사용하는 이유
	원시타입(일반타입)을 박싱하면 다양한 메소드를 제공받을 수 있다.
	여러 일반 타입을 하나의 타입으로 묶기 위해서는 반드시 클래스 타입(Wrapper Class)으로 사용해야 되고,
	이 때에는 박싱을 해주어야 한다.
--------------------------------------------------------------------------------------------------
알고리즘
	어떤 문제가 발생되었을 때 해결할 수 있는 절차 혹은 순서

자료구조
	의미 없는 데이터를 하나의 정보로 만들어주는 알고리즘들의 집합,
	수집한 자료를 저장하는 방법

컬렉션 프레임워크(Collection Framework) : 자료구조
	많은 데이터를 쉽고 효과적으로 관리할 수 있는 표준화된 방법을 제공하는 클래스들의 집합.

1. List extends Collection
- List 구현 클래스
	Vector : 용량 관리, 보안성 강화, 처리량 감소
	LinkedList : FILO으로 인해 넣을 때는 빨라도 뺄 때에는 상대적으로 느리다.
	ArrayList : 인덱스로 데이터를 관리한다.
		    컬렉션 클래스 중 실무에서 가장 많이 사용되는 클래스이다.
		    배열의 특징인 인덱스를 이용하여 값을 저장하고 관리한다.

- 배열과 ArrayList의 차이
	배열은 길이에 제한을 두어야 할 때 자주 사용되고,
	ArrayList는 몇 개의 데이터가 들어올 지 알 수 없을 때 사용한다.

2. Set
3. Map
































