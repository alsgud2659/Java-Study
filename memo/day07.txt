변수의 종류
	지역변수(local variable) : 클래스 중괄호 영역은 포함되지 않으며, 메소드 또는 그 안의 영역에서 선언된 변수
	매개변수(parameter) : 메소드의 소괄호 안에서 선언되는 변수
	전역변수(global variable) : 클래스 중괄호 영역에서 전언된 변수
	정적변수(static variable, class variable) : 객체 간 공유, 편의성

저장기억부류(Storage class)

		Stack			Data영역

		지역변수, 매개변수		전역변수, 정적변수

초기화		직접			자동
생명주기		}			new, 프로그램 종료 시
-------------------------------------------------------------------------------------------------------------------------------
상속(inheritance)
	1. 기존에 선언된 클래스의 필드를 새롭게 만들 클래스의 필드로 사용하고자 할 때
	2. 여러 클래스 선언 시 필드가 겹치는 경우, 부모 클래스를 먼저 선언하고
	   공통필드를 묶어서 자식 클래스들에게 상속해준다.

상속 문법
	class A{
		A필드
	}

	class B extends A{
		A, B필드
	}

A : 부모 클래스, 상위 클래스, 슈퍼 클래스, 기반 클래스
B : 자식 클래스, 하위 클래스, 서브 클래스, 파생 클래스

super() : 부모 생성자
	자식 클래스 타입의 객체로 부모 필드에 접근할 수 있다.
	하지만 자식 생성자만 호출하기 때문에, 자식 필드만 메모리에 할당된다고 생각할 수 있다.
	사실 자식 생성자에는 항상 부모 생성자를 호출하기 때문에 자식 생성자 호출 시
	부모와 자식 필드 모두 메모리에 할당된다.
	이 때 부모 생성자를 호출하는 방법은 super()를 사용하는 것이다.
	만약, super()를 작성하지 않더라도 컴파일러가 자동으로 작성해준다.

다형성(polymorphism)
	1. 오버로딩
	2. 오버라이딩(재정의)
	부모 필드에서 선언한 메소드를 자식 필드에서 수정하고자할 때 재정의를 해야 한다.
	이는 자식에서 부모 필드의 메소드와 동일한 이름으로 선언하는 것이다.
	부모 필드가 메모리에 먼저 할당되고 a라는 메소드가 먼저 올라간다고 하면,
	자식 필드가 메모리에 할당되면서 재정의한 a 메소드가 새롭게 만들어지는 것이 아닌
	기존에 할당된 a 메소드 저장공간에 새롭게 재정의한 소스코드의 주소가 들어가게 된다.
	따라서 자식 객체로 a 메소드에 접근하면 자식 필드에서 재정의한 소스코드의 내용이 읽히게 된다.
------------------------------------------------------------------------------------------------------------------
접근 권한 제어자(접근자)
	default : 다른 패키지에서 접근 불가
	public : 모든 곳에서 접근 가능, 대표 클래스를 의미할 때 사용
	protected : 다른 패키지에서 접근 불가, 자식은 허용
	private : 다른 클래스에서 접근 불가, 메소드로만 접근하자!(getter, setter)
----------------------------------------------------------------------------------------------------
Casting
	up casting : 자식 값을 부모 타입으로 형변환
	down casting : up casting된 객체를 자식 타입으로 형변환
	※ 부모 값을 자식 타입으로 형변환 시 오류

Casting을 사용하는 이유
	모든 자식 값을 전달받기 위해서는 동일한 타입의 저장공간으로 받아야 한다.
	하지만 자식끼리는 서로 타입이 다르기 때문에 한 번에 전달받을 수가 없다.
	이 때 up casting을 사용하면, 모든 자식이 부모 타입이므로 하나의 저장공간에
	모든 자식을 받을 수 있게 된다.
	만약 up casting으로 자식 값을 전달받았다면, 자식에서 새롭게 구현한 기능들은 사용할 수 없기 때문에
	down casting을 통해서 복구하고 사용한다.

객체 간 타입 비교
instanceof
	a instanceof A : 조건식, 참 또는 거짓 중 하나가 나오는 식
	- a 가 A 타입이면 true
	- a 가 A 타입이 아니면 false












